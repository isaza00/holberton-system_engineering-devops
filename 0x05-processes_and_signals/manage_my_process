#!/usr/bin/env bash
Bash (init) script 101-manage_my_process that manages manage_my_process.
#Read:

#    &
#    init.d
#    Daemon
#    Positional parameters

#man: sudo

#Programs that are detached from the terminal and running in the background are called daemons or processes, need to be managed. The general minimum set of instructions is: start, restart and stop. The most popular way of doing so on Unix system is to use the init scripts.

#Write a manage_my_process Bash script that:

#    Indefinitely writes I am alive! to the file /tmp/my_process
#    In between every I am alive! message, the program should pause for 2 seconds

#Write Bash (init) script 101-manage_my_process that manages manage_my_process. (both files need to be pushed to git)

#Requirements:

#    When passing the argument start:
#        Starts manage_my_process
#        Creates a file containing its PID in /var/run/my_process.pid
#        Displays manage_my_process started
#    When passing the argument stop:
#        Stops manage_my_process
#        Deletes the file /var/run/my_process.pid
#        Displays manage_my_process stopped
#    When passing the argument restart
#        Stops manage_my_process
#        Deletes the file /var/run/my_process.pid
#        Starts manage_my_process
#        Creates a file containing its PID in /var/run/my_process.pid
#        Displays manage_my_process restarted
#    Displays Usage: manage_my_process {start|stop|restart} if any other argument or no argument is passed

#Note that this init script is far from being perfect (but good enough for the sake of manipulating process and PID file), for example we do not handle the case where we check if a process is already running when doing ./101-manage_my_process start, in our case it will simply create a new process instead of saying that it is already started.

while true; do
        echo "I am alive!" >> /tmp/my_process
        sleep 2
done
